// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mahjong/ai/v1/ai.proto

package aiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MahjongAIService_AskMahjongAI_FullMethodName = "/mahjong.ai.v1.MahjongAIService/AskMahjongAI"
)

// MahjongAIServiceClient is the client API for MahjongAIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MahjongAIServiceClient interface {
	AskMahjongAI(ctx context.Context, in *AskMahjongAIRequest, opts ...grpc.CallOption) (*AskMahjongAIResponse, error)
}

type mahjongAIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMahjongAIServiceClient(cc grpc.ClientConnInterface) MahjongAIServiceClient {
	return &mahjongAIServiceClient{cc}
}

func (c *mahjongAIServiceClient) AskMahjongAI(ctx context.Context, in *AskMahjongAIRequest, opts ...grpc.CallOption) (*AskMahjongAIResponse, error) {
	out := new(AskMahjongAIResponse)
	err := c.cc.Invoke(ctx, MahjongAIService_AskMahjongAI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MahjongAIServiceServer is the server API for MahjongAIService service.
// All implementations must embed UnimplementedMahjongAIServiceServer
// for forward compatibility
type MahjongAIServiceServer interface {
	AskMahjongAI(context.Context, *AskMahjongAIRequest) (*AskMahjongAIResponse, error)
	mustEmbedUnimplementedMahjongAIServiceServer()
}

// UnimplementedMahjongAIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMahjongAIServiceServer struct {
}

func (UnimplementedMahjongAIServiceServer) AskMahjongAI(context.Context, *AskMahjongAIRequest) (*AskMahjongAIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskMahjongAI not implemented")
}
func (UnimplementedMahjongAIServiceServer) mustEmbedUnimplementedMahjongAIServiceServer() {}

// UnsafeMahjongAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MahjongAIServiceServer will
// result in compilation errors.
type UnsafeMahjongAIServiceServer interface {
	mustEmbedUnimplementedMahjongAIServiceServer()
}

func RegisterMahjongAIServiceServer(s grpc.ServiceRegistrar, srv MahjongAIServiceServer) {
	s.RegisterService(&MahjongAIService_ServiceDesc, srv)
}

func _MahjongAIService_AskMahjongAI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskMahjongAIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MahjongAIServiceServer).AskMahjongAI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MahjongAIService_AskMahjongAI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MahjongAIServiceServer).AskMahjongAI(ctx, req.(*AskMahjongAIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MahjongAIService_ServiceDesc is the grpc.ServiceDesc for MahjongAIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MahjongAIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mahjong.ai.v1.MahjongAIService",
	HandlerType: (*MahjongAIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskMahjongAI",
			Handler:    _MahjongAIService_AskMahjongAI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mahjong/ai/v1/ai.proto",
}
