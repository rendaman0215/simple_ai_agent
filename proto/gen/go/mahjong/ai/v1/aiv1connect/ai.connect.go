// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mahjong/ai/v1/ai.proto

package aiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/rendaman0215/simple_ai_agent/proto/gen/go/mahjong/ai/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MahjongAIServiceName is the fully-qualified name of the MahjongAIService service.
	MahjongAIServiceName = "mahjong.ai.v1.MahjongAIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MahjongAIServiceAskMahjongAIProcedure is the fully-qualified name of the MahjongAIService's
	// AskMahjongAI RPC.
	MahjongAIServiceAskMahjongAIProcedure = "/mahjong.ai.v1.MahjongAIService/AskMahjongAI"
	// MahjongAIServiceAskMahjongAIStreamProcedure is the fully-qualified name of the MahjongAIService's
	// AskMahjongAIStream RPC.
	MahjongAIServiceAskMahjongAIStreamProcedure = "/mahjong.ai.v1.MahjongAIService/AskMahjongAIStream"
	// MahjongAIServiceHealthCheckProcedure is the fully-qualified name of the MahjongAIService's
	// HealthCheck RPC.
	MahjongAIServiceHealthCheckProcedure = "/mahjong.ai.v1.MahjongAIService/HealthCheck"
)

// MahjongAIServiceClient is a client for the mahjong.ai.v1.MahjongAIService service.
type MahjongAIServiceClient interface {
	// 麻雀AIに質問する（同期）
	AskMahjongAI(context.Context, *connect.Request[v1.AskMahjongAIRequest]) (*connect.Response[v1.AskMahjongAIResponse], error)
	// 麻雀AIに質問する（ストリーミング）
	AskMahjongAIStream(context.Context, *connect.Request[v1.AskMahjongAIRequest]) (*connect.ServerStreamForClient[v1.AskMahjongAIStreamResponse], error)
	// ヘルスチェック
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
}

// NewMahjongAIServiceClient constructs a client for the mahjong.ai.v1.MahjongAIService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMahjongAIServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MahjongAIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mahjongAIServiceMethods := v1.File_mahjong_ai_v1_ai_proto.Services().ByName("MahjongAIService").Methods()
	return &mahjongAIServiceClient{
		askMahjongAI: connect.NewClient[v1.AskMahjongAIRequest, v1.AskMahjongAIResponse](
			httpClient,
			baseURL+MahjongAIServiceAskMahjongAIProcedure,
			connect.WithSchema(mahjongAIServiceMethods.ByName("AskMahjongAI")),
			connect.WithClientOptions(opts...),
		),
		askMahjongAIStream: connect.NewClient[v1.AskMahjongAIRequest, v1.AskMahjongAIStreamResponse](
			httpClient,
			baseURL+MahjongAIServiceAskMahjongAIStreamProcedure,
			connect.WithSchema(mahjongAIServiceMethods.ByName("AskMahjongAIStream")),
			connect.WithClientOptions(opts...),
		),
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+MahjongAIServiceHealthCheckProcedure,
			connect.WithSchema(mahjongAIServiceMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mahjongAIServiceClient implements MahjongAIServiceClient.
type mahjongAIServiceClient struct {
	askMahjongAI       *connect.Client[v1.AskMahjongAIRequest, v1.AskMahjongAIResponse]
	askMahjongAIStream *connect.Client[v1.AskMahjongAIRequest, v1.AskMahjongAIStreamResponse]
	healthCheck        *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
}

// AskMahjongAI calls mahjong.ai.v1.MahjongAIService.AskMahjongAI.
func (c *mahjongAIServiceClient) AskMahjongAI(ctx context.Context, req *connect.Request[v1.AskMahjongAIRequest]) (*connect.Response[v1.AskMahjongAIResponse], error) {
	return c.askMahjongAI.CallUnary(ctx, req)
}

// AskMahjongAIStream calls mahjong.ai.v1.MahjongAIService.AskMahjongAIStream.
func (c *mahjongAIServiceClient) AskMahjongAIStream(ctx context.Context, req *connect.Request[v1.AskMahjongAIRequest]) (*connect.ServerStreamForClient[v1.AskMahjongAIStreamResponse], error) {
	return c.askMahjongAIStream.CallServerStream(ctx, req)
}

// HealthCheck calls mahjong.ai.v1.MahjongAIService.HealthCheck.
func (c *mahjongAIServiceClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// MahjongAIServiceHandler is an implementation of the mahjong.ai.v1.MahjongAIService service.
type MahjongAIServiceHandler interface {
	// 麻雀AIに質問する（同期）
	AskMahjongAI(context.Context, *connect.Request[v1.AskMahjongAIRequest]) (*connect.Response[v1.AskMahjongAIResponse], error)
	// 麻雀AIに質問する（ストリーミング）
	AskMahjongAIStream(context.Context, *connect.Request[v1.AskMahjongAIRequest], *connect.ServerStream[v1.AskMahjongAIStreamResponse]) error
	// ヘルスチェック
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
}

// NewMahjongAIServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMahjongAIServiceHandler(svc MahjongAIServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mahjongAIServiceMethods := v1.File_mahjong_ai_v1_ai_proto.Services().ByName("MahjongAIService").Methods()
	mahjongAIServiceAskMahjongAIHandler := connect.NewUnaryHandler(
		MahjongAIServiceAskMahjongAIProcedure,
		svc.AskMahjongAI,
		connect.WithSchema(mahjongAIServiceMethods.ByName("AskMahjongAI")),
		connect.WithHandlerOptions(opts...),
	)
	mahjongAIServiceAskMahjongAIStreamHandler := connect.NewServerStreamHandler(
		MahjongAIServiceAskMahjongAIStreamProcedure,
		svc.AskMahjongAIStream,
		connect.WithSchema(mahjongAIServiceMethods.ByName("AskMahjongAIStream")),
		connect.WithHandlerOptions(opts...),
	)
	mahjongAIServiceHealthCheckHandler := connect.NewUnaryHandler(
		MahjongAIServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(mahjongAIServiceMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mahjong.ai.v1.MahjongAIService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MahjongAIServiceAskMahjongAIProcedure:
			mahjongAIServiceAskMahjongAIHandler.ServeHTTP(w, r)
		case MahjongAIServiceAskMahjongAIStreamProcedure:
			mahjongAIServiceAskMahjongAIStreamHandler.ServeHTTP(w, r)
		case MahjongAIServiceHealthCheckProcedure:
			mahjongAIServiceHealthCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMahjongAIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMahjongAIServiceHandler struct{}

func (UnimplementedMahjongAIServiceHandler) AskMahjongAI(context.Context, *connect.Request[v1.AskMahjongAIRequest]) (*connect.Response[v1.AskMahjongAIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mahjong.ai.v1.MahjongAIService.AskMahjongAI is not implemented"))
}

func (UnimplementedMahjongAIServiceHandler) AskMahjongAIStream(context.Context, *connect.Request[v1.AskMahjongAIRequest], *connect.ServerStream[v1.AskMahjongAIStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mahjong.ai.v1.MahjongAIService.AskMahjongAIStream is not implemented"))
}

func (UnimplementedMahjongAIServiceHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mahjong.ai.v1.MahjongAIService.HealthCheck is not implemented"))
}
