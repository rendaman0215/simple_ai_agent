// @generated by protoc-gen-es v1.2.0 with parameter "import_extension=none,target=ts"
// @generated from file mahjong/ai/v1/ai.proto (package mahjong.ai.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * 麻雀AIのリクエスト
 *
 * @generated from message mahjong.ai.v1.AskMahjongAIRequest
 */
export class AskMahjongAIRequest extends Message<AskMahjongAIRequest> {
  /**
   * 麻雀AIのデータ
   *
   * @generated from field: string prompt = 1;
   */
  prompt = "";

  constructor(data?: PartialMessage<AskMahjongAIRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mahjong.ai.v1.AskMahjongAIRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AskMahjongAIRequest {
    return new AskMahjongAIRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AskMahjongAIRequest {
    return new AskMahjongAIRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AskMahjongAIRequest {
    return new AskMahjongAIRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AskMahjongAIRequest | PlainMessage<AskMahjongAIRequest> | undefined, b: AskMahjongAIRequest | PlainMessage<AskMahjongAIRequest> | undefined): boolean {
    return proto3.util.equals(AskMahjongAIRequest, a, b);
  }
}

/**
 * 麻雀AIのレスポンス
 *
 * @generated from message mahjong.ai.v1.AskMahjongAIResponse
 */
export class AskMahjongAIResponse extends Message<AskMahjongAIResponse> {
  /**
   * @generated from field: string response = 1;
   */
  response = "";

  constructor(data?: PartialMessage<AskMahjongAIResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mahjong.ai.v1.AskMahjongAIResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AskMahjongAIResponse {
    return new AskMahjongAIResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AskMahjongAIResponse {
    return new AskMahjongAIResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AskMahjongAIResponse {
    return new AskMahjongAIResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AskMahjongAIResponse | PlainMessage<AskMahjongAIResponse> | undefined, b: AskMahjongAIResponse | PlainMessage<AskMahjongAIResponse> | undefined): boolean {
    return proto3.util.equals(AskMahjongAIResponse, a, b);
  }
}

